https://wiki.python.org/moin/UsefulModules
https://docs.python.org/3/library/

Virtual Envirionments:
	python -m venv myenv		# create environment		
	myenv\Scripts\activate		# activate environtment
	deactivate			# deactivate environment
	rm -rf myenv			# delete myenv directory
	pip freeze > requirements.txt	
	pip install -r requirements

	alternatives: pipenv, virtualenv, poetry

	bin/, Scripts/		contain executables for virtual env like python interpreter, pip
	include/		C headers specific to Python version for interpreter useful when compiling C extensions
	lib/, Lib/		standard library files, installed packages
		site-packages/	where third party packages are installed
	pyvenv.cfg		metadata

pip [command] [options]				pip- Preferred Installer Program
	commands: 
		install 
			-r, --requirement <file>	# install from requirements file
			-e, --editable <path/url>	# install project in editable mode	
			-U, --upgrade <package_name>	
			--no-deps <package_name>	# not install package dependencies
			--user <package_name>		# install to user site packages directory
			--target=<dir>	<package>	# to specific directory
			--timeout=<sec> <package>
			--compile <package>		# source to byte code
		uninstall
			-y, --yes <package>		# auto confirm uninstallation
		list
			-o, --outdated
			-u, --uptodate
			--format=<format>		# `columns`, `freeze`, `json`
			--not-required			# not dependencies of other packages
		show
			-f, -files <package>		# list of files for package
		freeze
			-r, --requirement <file>	# use given requirements file
			--all				# don't skip any package
		search
			-d, dest <dir> <package>	# download to directory
		check
		wheel
		help
			
python [flags] [scipt] [arguments]
	-c <command>			# execute python command from cli
	-m <module>			# runs library module as a script -> python -m http.server 8000
	-i <script>			# opens interactive interpreter after running script	-> python -i myscript.py (interactive debugging)
	-O, -OO <script>		# optimize generated bytecode, remove assert / doc strings
	-B <script>			# prevents creation of __pycache__ files
	-q 				# suppresses output of python startup messages
	-v, -vv <script>		# increse verbosity useful for debugging
	-V, --version			# python version
	-W <arg>			# `ignore` (warnings), `default` (show once per occurance), `error` (warning -> error) -> python -W ignore myscript.py
	-S <script>			# prevent auto imprt of `site` module
	-h, --help				


import os:
	.chdir()
import random: 

	.seed(a = None)	-> initializes with a else current system time used
	.random() 	-> [0.0, 1.0)
	.uniform(a, b) 	-> [a, b]
	.randint(a, b)	-> [a, b]
	.randrange(start, stop[, step])	
	.getrandbits(k)	-> random integer with k random bits	
	.choice(collection)	-> random element from non-empty sequence
	.choices(population, weights = None, *, cum_weights = None, k = 1)	-> k elements from chosen population with optional weights
	.sample(population, k)	-> k unique elements from population
	.shuffle(x[, random])	-> in place
	.normalvariate(mu, sigma)	-> float normal distribution
	.gauss(mu, sigma)	-> slightly faster but less accurate
	.expovariate(lambd)	-> exponential distribution
	.lognormvariate(mu, sigma)	-> log-normal distribution

import datetime:
	from datetime import datetime, timedelta; my_time = datetime.now(); my_time = datetime(1952, 12, 24); my_time.day
		date.strftime(format); 
			print(my_time.strftime("%d/%m/%Y %H:%M")) 
		strptime
	timedelta object: 
		difference = midsummer - time_now; days, seconds, microseconds;  one_week = timedelta(days=7)
import difflib: 
	get_close_matches()


import re	
	define a collection of strings which follow certain rules. pattern matching, text processing
	
	
	`|`	like `or`. called pipe character -> match alternate substrings like `or`. 
			"911|112" -> 911 or 112
	`[]`	like `or`. group of accepted characters. "[aeio]". are any of these present?
	`-`	matching ranges of characters. 
			"[0-68a-d]" -> 0 to 6, 8, a to d. all ranges are inclusive
			"[1-3][0-9]" -> 1 to 3 followed by 0 to 9 meaning 10 to 39
			"C-FSRO" -> C TO F, S, R, O
	`*`	0 or more repetition
			"A[BCDE]*Z" -> AZ, ADZ, ADEZ, ABCDZ, ABCDEZ, ADBCZ, ABCDEBCDEBCDEZ
	`+`	1 or more repetition
			"ba+b" -> bab, baab, baaaaaaaaaaab
	`?`	0 or 1 repetition 	
	`{m[, n]}`	matches from `m` to `n` (optional) repetitions 
	`.`	wildcard character -> match any single character
			"c...o" -> c-3po, cello
	`^`	beginning of the string
	`$`	end of string
			"^[123]*$" -> 1221, 33333333333
	`\`	for special characters reserved for regex syntax
			"1\+" -> 1+	"^\*" -> *moi
	`()`	group together as one
			"(ab)+c" -> abc, ababc, ababababc
			"^(jabba).*(hut)$" -> jabba the hut, jabba a hut
	`\d`	any digits -> [0-9]
	`\D`	non-digit
	`\w`	word character -> [a-zA-Z0-9_]
	`\W` 	non word character
	`\s`	whitespace
	`\S`	non whitespace character
	
	.compile(pattern, flags)	pattern -> re.Pattern object (used for matching using match() search(). for more efficiency
						pattern = re.compile(r'\d+')	-> result = pattern.findall(string)
	.match(pattern, string[, flags])		pattern matches at the beginning of string	returns re.Match object upon succesfull matches	
	.search(pattern, string)	returns Match object or `None`. Match objects are always True
						result = re.search(pattern, string) -> result.group() -> '123'
	.findall(pattern, string)	returns list of all instances which match pattern
	.finditer(pattern, string)	like above but returns iterator
	.sub(pattern, replace, string)	replaces match in string with replace
	.split(pattern, string)		splits by occurrences of pattern
	
	Flags:
		change how regex pattern interpreted. can combine with bitwise OR |
		re.IGNORECASE // re.I	-> case insensitive matching
		re.MULTILINE //	re.M	-> ^, $ match start end of each line
		re.DOTALL // re.S	-> . matches all characters including newline
		re.VERBOSE // re.X	-> aloows to write more readable regex by ignoring whitespace


import pygame:
	pygame.init()				initializes modules
	pygame.display.filp()			update contents of window
	pygame.display.set_caption("Capiton")
	= pygame.display.set_mode(size)		returns Surface object (screen the main window), size is tuple		window = pygame.display.set_mode(size)

	= pygame.Surface(size):			Surface object represents image. 2D array of pixels that you can draw, manipulate, display
		window.fill(color)			fill color (rgb tuple)
		robot.get_width()/ .get_height()
		window.bilt(image, position)		bit block transfer. block of pixels from one image is coppied directly to another. 
	
	= pygame.image.load(filepath)		returns Surface object, filepath							robot = pygame.image.load("robot.png")
	
	pygame.draw.rect(screen, color, (x, y, width, height), width)			# window = pygame.display.set_mode(-), # color = (r, g, b), # coordinates = (x1, y1, x2, y2)
		   .circle(screen, color, center, radius, width)	# center = (x, y) , # radius = r
		   .line(screen, color, start, end, width)		# start = (x1, y1), end = (x2, y2)
	= pygame.font.SysFont("Arial", size)		returns `Font` object. 		# game_font = ----
	= game_font.render("Moikka!", antialiasing_flag, color)		method of Font object that creates an image (Surface object)
	= pygame.font.Font.render()

	pygame.event:
		pygame.event.get()			get event queue iterable			for event in pygame.event.get()
		event_.type == 										pygame.QUIT, KEYDOWN, KEYPUP, MOUSEMOTION, MOUSEBUTTONDOWN, 
		event_.key == 										pygame.K_LEFT, K_RIGHT, K_a, 
		event_.button				mouse button
		event_.pos[]				mouse position

	= pygame.time.Clock()			returns Clock object, used to track time
		clock.tick(fps)			used as frame rate limit. pause execution of game loop tom maintain desired FPS. each iteration it calculates the time elapsed since the last call to the function.
	
	pygame.quit()
	pygame.QUIT				constant value for quiting